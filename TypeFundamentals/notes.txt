Primitive Types
---------------

Any type the compiler directly supports.
The compiler is able to cast primitive types implicitly and explicitly.
Implicit casts are "safe" because they do not result in data loss.
Primitive types can be written as literals. A literal is an instance of the type itself.

Overflow Checking
-----------------

C# compiler has overflow checking off by default.
Decimal is not a CLR primitive type.
	There are no overflow specific IL instructions.
	The checked and unchecked operators have no effect.

Value Types
-----------

Value types derive from System.Object > System.ValueType.
Value types are allocated on the stack.
Value types are implicitly sealed.
Value types cannot be static.
Value types should be immutable.
Value types should be small (16 bytes or less) to reduce memory overhead when passing by value.
Value types do not have a type object pointer or a sync block index.
Because value types don't have a sync block index it's not possible to have multiple threads synchronise their access to the instance.
The CLR invokes virtual methods (Equals, GetHashCode, ToString) nonvirtually because value types are implicitly sealed.
	Except when you override a virtual method and call the base type's implementation.
		The value type gets boxed.
Calling a nonvirtual method (GetType, MemberwiseClone) required the value type to be boxed because these methods are defined by System.Object.
The this keyword is read/write within a value type.

Boxing
------

1) Memory is allocated from the managed heap.
2) The value type's fields are copied to the allocated memory.
3) A pointer to the object (boxed value type) is returned.

Unboxing
--------

Obtaining a pointer to object (boxed value type) on the heap.
	This operation is typically followed by copying the value type's fields into the thread stack.

Equality
--------

http://msdn.microsoft.com/en-us/library/ms173147(v=vs.80).aspx

Hash Codes
----------

http://stackoverflow.com/questions/263400/what-is-the-best-algorithm-for-an-overridden-system-object-gethashcode
http://eternallyconfuzzled.com/tuts/algorithms/jsw_tut_hashing.aspx

Dynamic
-------

Dynamic is a primitive type.
IL code is produced that describes the desired operation.
	This code is referred to as the payload.
A dynamic expression is really the same type as System.Object.

Any expression can implicitly be cast to dynamic since all expressions result in a type that is derived from System.Object.

object o = 123;
int i = o; // Error: Needs to be explicitly cast from object to int.
int i = (int)o; // Explicit cast from object to int.

dynamic d = 123;
int i = d; // Implicit cast from dynamic to int.

At runtime the C# compiler first checks to see if an object implements the IDynamicMetaObjectProvider interface.
	If yes then the GetMetaObject method is called which returns a DynamicMetaObject derived type.
	If no then reflection is used.

Type Visibility
---------------

You can access internal types from another assembly if the calling assembly is considered a "friend".
	You specify friend assemblies by using the InternalsVisibleTo attribute.
	The friend assembly feature should only be used by assemblies that ship together.

Static Classes
--------------

Defining a class as static causes the c# compiler to make the class both abstract and sealed.
The c# compiler will not emit an instance constructor (.ctor).

Virtual Methods
---------------

The CLR offers two IL instructions for calling a method.
	The call IL instruction can be used to call static, instance, and virtual methods.
		Assumes that the object variable is not null.
		Often used to call a virtual method nonvirtually.
			To prevent a method from calling itself recursively until the stack is overflowed.
	The callvirt IL instruction can be used to call instance and virtual methods.
		The JIT compiler generates code to check for null references.
			A NullReferenceException will be thrown.

The C# compiler will always emit a callvirt IL instruction for instance and virtual methods.
	It is left to the JIT compiler to determine whether a method should be called virtually.
	This means a null check is performed when calling an instance method.
